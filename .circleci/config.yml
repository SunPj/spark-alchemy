version: 2.1

jobs:
  build:
    parameters:
      create-release:
        type: boolean
        default: false

    docker:
      - image: swoopinc/spark-alchemy:adoptopenjdk-8u222-alpine-circleci-201909251709
      - image: swoopinc/postgres-hll:11

    working_directory: ~/spark-alchemy

    environment:
      SBT_MEM_MB: 2048
      TERM: dumb
      AWS_REGION: us-east-1
      SWOOP_VERSION_FILE: VERSION

    steps:
      - checkout

      - run:
          name: Define Environment Variables
          command: |
            mkdir -p $HOME/bin
            echo 'export PATH="$HOME/bin:$PATH"' >> $BASH_ENV
            echo 'export SWOOP_PROJECT_VERSION="$(grep -Po "\\d+.\\d+" $SWOOP_VERSION_FILE).$CIRCLE_BUILD_NUM"' >> $BASH_ENV
            echo 'export SBT_OPTS="-Xms${SBT_MEM_MB}m -Xmx${SBT_MEM_MB}m -Xss128m -XX:+CMSClassUnloadingEnabled -XX:MaxMetaspaceSize=1024m"' >> $BASH_ENV
            source $BASH_ENV

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}

      - run:
          name: Wait for postgres
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # "cat /dev/null |" prevents sbt from running in interactive mode. One of many amazing
      # hacks get sbt working in a sane manner.
      - run:
          name: sbt test
          command: cat /dev/null | sbt test

      - run:
          name: Set $SWOOP_PROJECT_VERSION in $SWOOP_VERSION_FILE
          command: echo "${SWOOP_PROJECT_VERSION}" | tee $SWOOP_VERSION_FILE

      - when:
          condition: << parameters.create-release >>
          steps:
            - run:
                name: sbt publish
                command: cat /dev/null | sbt publish

            - run:
                name: sbt publishMicrosite
                command: cat /dev/null | sbt publishMicrosite

            - run:
                name: Create Github Release
                command: |
                  if [ ${CIRCLE_PULL_REQUEST:-""} = "" ]; then
                    curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${GITHUB_TOKEN}" -X POST "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases" -d '{
                      "tag_name": "v'"${SWOOP_PROJECT_VERSION}"'",
                      "target_commitish": "'"${CIRCLE_SHA1}"'",
                      "name": "v'"${SWOOP_PROJECT_VERSION}"'",
                      "body": "'"${CIRCLE_BUILD_URL}"'",
                      "prerelease": false
                    }'
                  fi

      - save_cache:
          paths:
            - ~/.m2
            - ~/.ivy2/cache
            - ~/.sbt
          key: v1-dependencies-{{ checksum "build.sbt" }}

      - store_test_results:
          path: ~/spark-alchemy/target/test-reports

      - store_artifacts:
          path: ~/spark-alchemy/target/test-reports

workflows:
  version: 2
  spark-alchemy-workflow:
    # Structuring the workflow with the same job twice, except building off different branches
    # and perform deployments only on the master branch. It's structured this way so that the
    # CircleCI job shows the deployment and corresponding tests together in one unit,
    # rather than being split up across multiple jobs.
    jobs:
      - build:
          create-release: false
          filters:
            branches:
              ignore:
                - /.*/
